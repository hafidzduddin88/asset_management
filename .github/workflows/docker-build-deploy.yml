name: üöÄ Build & Push Docker Image

on:
  push:  # Build on every commit to any branch
  pull_request:
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ambp

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Git commit short SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

    - name: Build and push Docker image (latest and git sha)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
        labels: |
          org.opencontainers.image.description=Asset Management System
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Render
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Triggering Render deployment..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{}')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "HTTP Status: $HTTP_CODE"
        echo "Response: $BODY"
        
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
          echo "‚úÖ Deployment triggered successfully"
        else
          echo "‚ùå Deployment failed with status $HTTP_CODE"
          exit 1
        fi

    - name: Build summary
      run: |
        echo "üöÄ Build completed successfully"
        echo "üì¶ Image pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "üè∑Ô∏è Image pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}"
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "üåê Render deployment triggered"
        fi

  clean:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    permissions:
      actions: write
      contents: read
    
    steps:
    - name: Clean old caches
      run: |
        echo "Cleaning old build caches..."
        
        # Get all caches
        CACHES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github+json" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/repos/${{ github.repository }}/actions/caches")
        
        # Delete old buildkit caches (keep last 1)
        echo "$CACHES" | jq -r '.actions_caches | map(select(.key | test("buildkit|buildx"))) | .[1:] | .[].id' | while read cache_id; do
          if [ ! -z "$cache_id" ]; then
            echo "Deleting old cache: $cache_id"
            curl -X DELETE \
                 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github+json" \
                 -H "X-GitHub-Api-Version: 2022-11-28" \
                 "https://api.github.com/repos/${{ github.repository }}/actions/caches/$cache_id" || true
          fi
        done
        
        echo "Cache cleanup completed"
