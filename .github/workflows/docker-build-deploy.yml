name: Build and Deploy Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT }}

jobs:
  build-and-clear:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Delete old Docker images and manifests
        run: |
          # Get Docker Hub token
          TOKEN=$(curl -s -H "Content-Type: application/json" \
                  -X POST -d '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_TOKEN }}"}' \
                  https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Get current image digest to preserve
          CURRENT_DIGEST="${{ steps.build.outputs.digest }}"
          echo "Preserving current image: $CURRENT_DIGEST"
          
          # Delete old tags (keep latest)
          PAGE=1
          while true; do
            RESPONSE=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.DOCKER_REPO }}/tags/?page_size=100&page=$PAGE")
            TAGS=$(echo "$RESPONSE" | jq -r '.results[] | select(.name != "latest") | .name')
            
            if [ -z "$TAGS" ]; then
              echo "No more old tags found on page $PAGE"
              break
            fi
            
            for tag in $TAGS; do
              echo "Deleting old tag: $tag"
              curl -X DELETE -H "Authorization: JWT $TOKEN" \
                   "https://hub.docker.com/v2/repositories/${{ env.DOCKER_REPO }}/tags/$tag/" || true
              sleep 1
            done
            
            PAGE=$((PAGE + 1))
            if [ $PAGE -gt 5 ]; then break; fi
          done
          
          echo "Old images cleanup completed."

      - name: Clear old GitHub Actions cache
        run: |
          # Delete old cache entries (keep last 5)
          gh cache list --limit 100 | tail -n +6 | cut -f1 | xargs -I {} gh cache delete {} || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: build-and-clear
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Render
        run: |
          echo "Triggering Render deployment..."
          # Try both deploy endpoints
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{}')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "✅ Deployment triggered successfully"
          else
            echo "❌ V1 API failed, trying legacy endpoint..."
            # Fallback to legacy endpoint
            RESPONSE2=$(curl -s -w "\n%{http_code}" -X POST "https://api.render.com/deploy/srv-${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}")
            HTTP_CODE2=$(echo "$RESPONSE2" | tail -n1)
            BODY2=$(echo "$RESPONSE2" | head -n -1)
            
            echo "Legacy HTTP Status: $HTTP_CODE2"
            echo "Legacy Response: $BODY2"
            
            if [ "$HTTP_CODE2" -eq 200 ] || [ "$HTTP_CODE2" -eq 201 ]; then
              echo "✅ Legacy deployment triggered successfully"
            else
              echo "❌ Both endpoints failed"
              exit 1
            fi
          fi